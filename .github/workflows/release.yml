name: Releaser

on:
  workflow_dispatch:
    inputs:
      push:
        description: Should this push a new release? 
        required: false
        default: false
        type: boolean
      tag:
        description: Tag to release
        required: false
        type: string
  workflow_call:
    inputs:
      push:
        description: Should this push a new release? 
        required: false
        default: false
        type: boolean
      tag:
        description: Tag to release
        required: false
        type: string

jobs:
  releaser:
    runs-on: ubuntu-latest
    steps:

    - name: Dist Dir
      id: dist_dir
      run: mkdir -p dist artifacts

    - name: Get Tag Name
      id: set_tag
      env:
        GIT_TAG: ${{ inputs.tag }}
        DOWNLOAD_URL: ${{ github.server_url }}/${{ github.repository }}/releases/download
      run: |
        if [ -z "$GIT_TAG" ]; then
          GIT_TAG=${GITHUB_REF#refs/*/}
        fi
        VERSION=$(echo $GIT_TAG | cut -d'v' -f2)
        NAME="duploctl-${VERSION}"
        PACKAGE_NAME="duplocloud-client-${VERSION}"
        echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_OUTPUT
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "NAME=${NAME}" >> $GITHUB_OUTPUT
        echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
        echo "RELEASE_URL=${DOWNLOAD_URL}/${GIT_TAG}" >> $GITHUB_OUTPUT
    
    - name: Download Installer Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ steps.set_tag.outputs.NAME }}-*
        path: artifacts
        merge-multiple: false
    
    - name: Download Package Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ steps.set_tag.outputs.PACKAGE_NAME }}
        path: artifacts

    - name: Stage Release Artifacts
      shell: bash
      env:
        PACKAGE_NAME: ${{ steps.set_tag.outputs.PACKAGE_NAME }}
      run: |
        for d in artifacts/*; do
          name=$(basename $d)
          dest="dist/${name}.tar.gz"
          tar -czvf "$dest" -C $d .
        done
        cp -a artifacts/${PACKAGE_NAME}/. dist/
        find dist -type f -name "*.tar.gz" -execdir shasum -a 256 {} \; >> dist/checksums.txt
        echo "Created Release Artifacts"
        ls -l dist

    - name: Create Release
      id: release
      uses: softprops/action-gh-release@v2
      if: inputs.push == true
      with:
        name: ${{ steps.set_tag.outputs.GIT_TAG }}
        tag_name: ${{ steps.set_tag.outputs.GIT_TAG }}
        prerelease: false
        files: |
          dist/*
        body: |
          duploctl ${{ steps.set_tag.outputs.GIT_TAG }} is out!. 

          PyPi: 
          [duplocloud-client](https://pypi.org/project/duplocloud-client/${{ steps.set_tag.outputs.VERSION }}/)
          ```sh
          pip install duplocloud-client==${{ steps.set_tag.outputs.VERSION }}
          ```

          PIP Release:
          The dowload below named `duplocloud-client-${{ steps.set_tag.outputs.VERSION }}.tar.gz` is the pip distribution of the package. 
          ```sh
          pip install ${{ steps.set_tag.outputs.RELEASE_URL }}/duplocloud-client-${{ steps.set_tag.outputs.VERSION }}.tar.gz
          ```

          Dockerhub:  
          [duplocloud/duploctl:${{ steps.set_tag.outputs.GIT_TAG }}](https://hub.docker.com/r/duplocloud/duploctl)
          ```sh
          docker pull duplocloud/duploctl:${{ steps.set_tag.outputs.GIT_TAG }}
          ```

          Install CLI to Path:
          ```sh
          curl -s -L ${{ steps.set_tag.outputs.RELEASE_URL }}/duploctl-${{ steps.set_tag.outputs.VERSION }}-linux-amd64.tar.gz | tar xvz - -C /usr/local/bin
          ```

          Homebrew single binary:
          ```sh
          brew install duplocloud/tap/duploctl
          ```

          Homebrew with PIP:
          ```sh
          brew install duplocloud/tap/duploctl --with-pip
          ```
          
          Build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.25.0
      if: inputs.push == true
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        channel-id: ${{ vars.SLACK_CHANNEL_ID }}
        slack-message: |
          duploctl ${{ steps.set_tag.outputs.GIT_TAG }} is out! 
          ${{ steps.release.outputs.url }}

    - name: Job Summary
      env:
        GIT_TAG: ${{ steps.set_tag.outputs.GIT_TAG }}
        URL: ${{ steps.release.outputs.url }}
        VERSION: ${{ steps.set_tag.outputs.VERSION }}
      run: |
        cat <<EOF >> $GITHUB_STEP_SUMMARY
        Tag: $GIT_TAG
        Release: $URL
        Docker: duplocloud/duploctl:${GIT_TAG}
        PyPi: duplocloud-client==${VERSION}
        EOF
    